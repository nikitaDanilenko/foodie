# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)

GET           /recipes/measures                                   controllers.recipe.RecipeController.getMeasures
GET           /recipes/foods                                      controllers.recipe.RecipeController.getFoods
GET           /recipes/foods/:foodId                              controllers.recipe.RecipeController.getFood(foodId: Int)
GET           /recipes                                            controllers.recipe.RecipeController.getRecipes
GET           /recipes/:id                                        controllers.recipe.RecipeController.get(id: java.util.UUID)
POST          /recipes                                            controllers.recipe.RecipeController.create
PATCH         /recipes                                            controllers.recipe.RecipeController.update
DELETE        /recipes/:id                                        controllers.recipe.RecipeController.delete(id: java.util.UUID)
GET           /recipes/:id/ingredients                            controllers.recipe.RecipeController.getIngredients(id: java.util.UUID)
POST          /recipes/:id/duplicate                              controllers.recipe.RecipeController.duplicate(id: java.util.UUID)
PATCH         /recipes/:id/rescale                                controllers.recipe.RecipeController.rescale(id: java.util.UUID)
POST          /recipes/:recipeId/ingredients                      controllers.recipe.RecipeController.addIngredient(recipeId: java.util.UUID)
PATCH         /recipes/:recipeId/ingredients/:id                  controllers.recipe.RecipeController.updateIngredient(recipeId: java.util.UUID, id: java.util.UUID)
DELETE        /recipes/:recipeId/ingredients/:id                  controllers.recipe.RecipeController.removeIngredient(recipeId: java.util.UUID, id: java.util.UUID)
GET           /recipes/:recipeId/complex-ingredients              controllers.recipe.RecipeController.getComplexIngredients(recipeId: java.util.UUID)
POST          /recipes/:recipeId/complex-ingredients              controllers.recipe.RecipeController.addComplexIngredient(recipeId: java.util.UUID)
PATCH         /recipes/:recipeId/complex-ingredients              controllers.recipe.RecipeController.updateComplexIngredient(recipeId: java.util.UUID)
DELETE        /recipes/:recipeId/complex-ingredients/:id          controllers.recipe.RecipeController.removeComplexIngredient(recipeId: java.util.UUID, id: java.util.UUID)

GET           /complex-foods                                      controllers.complex.ComplexFoodController.all
GET           /complex-foods/:recipeId                            controllers.complex.ComplexFoodController.get(recipeId: java.util.UUID)
POST          /complex-foods                                      controllers.complex.ComplexFoodController.create
PATCH         /complex-foods                                      controllers.complex.ComplexFoodController.update
DELETE        /complex-foods/:recipeId                            controllers.complex.ComplexFoodController.delete(recipeId: java.util.UUID)

GET           /meals                                              controllers.meal.MealController.all
GET           /meals/:id                                          controllers.meal.MealController.get(id: java.util.UUID)
POST          /meals                                              controllers.meal.MealController.create
PATCH         /meals                                              controllers.meal.MealController.update
DELETE        /meals/:id                                          controllers.meal.MealController.delete(id: java.util.UUID)
GET           /meals/:id/entries                                  controllers.meal.MealController.getMealEntries(id: java.util.UUID)
POST          /meals/:id/duplicate                                controllers.meal.MealController.duplicate(id: java.util.UUID)
POST          /meals/entries                                      controllers.meal.MealController.addMealEntry
PATCH         /meals/entries                                      controllers.meal.MealController.updateMealEntry
DELETE        /meals/:mealId/entries/:id                          controllers.meal.MealController.deleteMealEntry(mealId: java.util.UUID, id: java.util.UUID)

GET           /reference-maps                                     controllers.reference.ReferenceController.all
GET           /reference-maps/trees                               controllers.reference.ReferenceController.allTrees
GET           /reference-maps/:id                                 controllers.reference.ReferenceController.get(id: java.util.UUID)
POST          /reference-maps                                     controllers.reference.ReferenceController.create
PATCH         /reference-maps                                     controllers.reference.ReferenceController.update
DELETE        /reference-maps/:id                                 controllers.reference.ReferenceController.delete(id: java.util.UUID)
GET           /reference-maps/:id/entries                         controllers.reference.ReferenceController.allReferenceEntries(id: java.util.UUID)
POST          /reference-maps/:id/duplicate                       controllers.reference.ReferenceController.duplicate(id: java.util.UUID)
POST          /reference-maps/entries                             controllers.reference.ReferenceController.addReferenceEntry
PATCH         /reference-maps/entries                             controllers.reference.ReferenceController.updateReferenceEntry
DELETE        /reference-maps/:mapId/entries/:nutrientCode        controllers.reference.ReferenceController.deleteReferenceEntry(mapId: java.util.UUID, nutrientCode: Int)

GET           /stats                                              controllers.stats.StatsController.get(from: Option[String], to: Option[String])
GET           /stats/food/:foodId                                 controllers.stats.StatsController.ofFood(foodId: Int)
GET           /stats/complex-food/:recipeId                       controllers.stats.StatsController.ofComplexFood(recipeId: java.util.UUID)
GET           /stats/recipe/:recipeId                             controllers.stats.StatsController.ofRecipe(recipeId: java.util.UUID)
GET           /stats/meal/:mealId                                 controllers.stats.StatsController.ofMeal(mealId: java.util.UUID)
GET           /stats/nutrients                                    controllers.stats.StatsController.allNutrients
GET           /stats/recipe-occurrences                           controllers.stats.StatsController.recipeOccurrences

GET           /                                                   controllers.home.HomeController.home
POST          /users/login                                        controllers.user.UserController.login
POST          /users/logout                                       controllers.user.UserController.logout
PATCH         /users                                              controllers.user.UserController.update
GET           /users                                              controllers.user.UserController.fetch
PATCH         /users/password                                     controllers.user.UserController.updatePassword
POST          /users/registration/request                         controllers.user.UserController.requestRegistration
POST          /users/registration/confirm                         controllers.user.UserController.confirmRegistration
GET           /users/recovery/find/:searchString                  controllers.user.UserController.find(searchString: String)
POST          /users/recovery/request                             controllers.user.UserController.requestRecovery
POST          /users/recovery/confirm                             controllers.user.UserController.confirmRecovery
POST          /users/deletion/request                             controllers.user.UserController.requestDeletion
POST          /users/deletion/confirm                             controllers.user.UserController.confirmDeletion
